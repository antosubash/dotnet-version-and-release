# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Install Versionize
      run: dotnet tool install --global Versionize
    - name: Setup git
      run: |
        git config --local user.email "antosubash@live.com"
        git config --local user.name "Anto Subash"
    - name: Versionize Release
      id: versionize
      run: versionize --changelog-all --exit-insignificant-commits
      continue-on-error: true
    - name: No release required
      if: steps.versionize.outcome != 'success'
      run: echo "Skipping publishing. No release required."
    - name: Push changes to GitHub
      if: steps.versionize.outcome == 'success'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
        tags: true
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: View context attributes
      uses: actions/github-script@v6
      with:
        script: console.log(context)
    # - name: "Create release"
    #   if: steps.versionize.outcome == 'success'
    #   uses: "actions/github-script@v5"
    #   with:
    #     github-token: "${{ secrets.GITHUB_TOKEN }}"
    #     script: |
    #       try {
    #         await github.rest.repos.createRelease({
    #           draft: false,
    #           generate_release_notes: true,
    #           name: ${{ github.event.inputs.main_version }},
    #           owner: context.repo.owner,
    #           prerelease: false,
    #           repo: context.repo.repo,
    #           tag_name: ${{ github.event.inputs.main_version }},
    #         });
    #       } catch (error) {
    #         core.setFailed(error.message);
    #       }